from datetime import datetime, timedelta
import time
from aiogram.types import FSInputFile, Message
from utils.log import logger
from PIL import Image
import variables as var
import os
from datetime import datetime, timedelta
from aiogram.types import FSInputFile, Message
from utils.log import logger
from PIL import Image
import variables as var
import bot.keyboards as kb

from utils.selenium_driver import driver_pool, AsyncDriver

from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

def clear_all_rows(driver: AsyncDriver):
    rows = WebDriverWait(driver, 10).until(
        EC.presence_of_all_elements_located((By.CLASS_NAME, "row"))
    )
    
    target_day = datetime.now().weekday()
    
    for i, row in enumerate(rows):
        if i == 0:
            continue
        try:
            header = row.find_element(By.XPATH, ".//div[contains(@class, 'table-header-col')]")
            lessons = row.find_elements(By.XPATH, ".//div[contains(@class, 'table-col')]")
            print(f"{i-1=} : {target_day=}")
            if i-1 == target_day:
                # –û—á–∏—â–∞–µ–º –∫–ª–∞—Å—Å—ã —É—Ä–æ–∫–æ–≤ –≤ —Ç–µ–∫—É—â–µ–º —Ä—è–¥—É
                for lesson in lessons:
                    driver.execute_script(
                        "arguments[0].className = 'table-col';", 
                        lesson  # –ü–µ—Ä–µ–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —Ä—è–¥–∞ –∏ —É—Ä–æ–∫–∞ –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
                    )
                
                # –û—á–∏—â–∞–µ–º –∫–ª–∞—Å—Å—ã –∑–∞–≥–æ–ª–æ–≤–∫–∞
                driver.execute_script(
                    "arguments[0].className = 'table-header-col';",
                    header
                )
                
                # –û—á–∏—â–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ç–æ–ª—å–∫–æ –≤ —Ç–µ–∫—É—â–µ–º —Ä—è–¥—É
            driver.execute_script(
                """
                const headerDiv = arguments[0].querySelector('div');
                if(headerDiv) {
                    headerDiv.innerHTML = headerDiv.innerHTML.split('<br>')[0].trim();
                }
                """,
                header
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä—è–¥–∞: {str(e)}")
            continue

def keep_only_day(driver, target_day):
    rows = WebDriverWait(driver, 10).until(
        EC.presence_of_all_elements_located((By.CLASS_NAME, "row"))
    )
    
    has_lessons = False
    
    print(f"{rows=}")
    for i, row in enumerate(rows):
        if i == 0:
            continue
        try:
            
            if i-1 == target_day:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞—Ä
                lessons = row.find_elements(By.XPATH, ".//div[contains(@class, 'table-col')]")
                for lesson in lessons:
                    content = lesson.find_element(By.XPATH, "./div[2]").text.strip()
                    if content != "-":
                        has_lessons = True
                        break
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –ø–∞—Ä–∞ - –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É
                if has_lessons:
                    continue
                else:
                    driver.execute_script("arguments[0].remove();", row)
                    return False
            else:
                driver.execute_script("arguments[0].remove();", row)
        except Exception as e:
            print(f"Error in keep_only_day {e}")
            continue
    
    return has_lessons

async def screenshot_timetable(message: Message, group_name: str, other_group: bool = False):
    logger.debug(f"Started screenshotting timetable for group {group_name} (—Ç–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è)...")
    week_num = var.calculate_current_study_number_week()
    monday_of_week = var.get_monday_of_week(week_num).strftime("%d.%m.%y")
    screenshot_path = f"./data/screenshots/full_{group_name.lower()}_{monday_of_week}.png"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –∏ –≤—Ä–µ–º–µ–Ω–∏ –µ–≥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
    if os.path.exists(screenshot_path):
        last_modified_time = datetime.fromtimestamp(os.path.getmtime(screenshot_path))
        if datetime.now() - last_modified_time < var.CACHE_DURATION:
            logger.debug(f"Using cached screenshot: {screenshot_path}")
            try:
                photo = FSInputFile(screenshot_path)
                await message.answer_photo(photo=photo, caption=f"<code>{group_name.capitalize()}</code>. <b>{week_num}</b> –Ω–µ–¥–µ–ª—è", parse_mode="html")
            except Exception as e:
                await status_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
            return screenshot_path

    status_message = await message.answer("‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ...")

    driver = await driver_pool.acquire()
    
    try:
        parent_container = await driver.select_timetable(group_name, next_week=False)
        if parent_container is None:
            if other_group:
                await status_message.delete()
                await message.answer(f"üì≠ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é –Ω–µ—Ç</b>.", parse_mode="html", reply_markup=kb.main_keyboard) 
                logger.warning(f"–¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è –¥–ª—è –≥—Ä—É–ø–ø—ã {group_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return None
            else:
                await status_message.edit_text(f"üì≠ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é –Ω–µ—Ç</b>.", parse_mode="html") 
                logger.warning(f"–¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è –¥–ª—è –≥—Ä—É–ø–ø—ã {group_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return None
        
        clear_all_rows(driver)
        driver.save_screenshot(screenshot_path)

        rect = parent_container.rect
        crop_box = (
            max(0, int(rect['x']) - var.MARGIN),
            max(0, int(rect['y']) - var.MARGIN),
            int(rect['x'] + rect['width'] + var.MARGIN),
            int(rect['y'] + rect['height'] + var.MARGIN)
        )
        image = Image.open(screenshot_path)
        cropped_image = image.crop(crop_box)
        cropped_image.save(screenshot_path)
        logger.debug(f"Screenshot saved: {screenshot_path}")

        try:
            photo = FSInputFile(screenshot_path)
            await status_message.edit_text("‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è—é...")
            await message.answer_photo(photo=photo, caption=f"<code>{group_name.capitalize()}</code>. <b>{week_num}</b> –Ω–µ–¥–µ–ª—è", parse_mode="html")
            await status_message.delete()
        except Exception as e:
            await status_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")

        return screenshot_path
    finally:
        await driver_pool.release(driver)


async def screenshot_timetable_next_week(message: Message, group_name: str):
    logger.debug(f"Started screenshotting timetable for group {group_name} (—Ç–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è)...")
    week_num = var.calculate_current_study_number_week() + 1
    monday_of_week = var.get_monday_of_week(week_num).strftime("%d.%m.%y")
    screenshot_path = f"./data/screenshots/nextweek_{group_name.lower()}_{monday_of_week}.png"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –∏ –≤—Ä–µ–º–µ–Ω–∏ –µ–≥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
    if os.path.exists(screenshot_path):
        last_modified_time = datetime.fromtimestamp(os.path.getmtime(screenshot_path))
        if datetime.now() - last_modified_time < var.CACHE_DURATION:
            logger.debug(f"Using cached screenshot: {screenshot_path}")
            try:
                photo = FSInputFile(screenshot_path)
                await message.answer_photo(photo=photo, caption=f"<code>{group_name.capitalize()}</code>. <b>{week_num}</b> –Ω–µ–¥–µ–ª—è", parse_mode="html", reply_markup=kb.main_keyboard)
            except Exception as e:
                await status_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
            return screenshot_path

    status_message = await message.answer("‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ...")

    driver = await driver_pool.acquire()
    try:
        parent_container = await driver.select_timetable(group_name, next_week=True)
        if parent_container is None:
            await status_message.delete()
            await message.answer(f"üì≠ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é –Ω–µ—Ç</b>.", parse_mode="html") 
            logger.warning(f"–°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è –¥–ª—è –≥—Ä—É–ø–ø—ã {group_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return None

        clear_all_rows(driver)
        driver.save_screenshot(screenshot_path)

        rect = parent_container.rect
        crop_box = (
            max(0, int(rect['x']) - var.MARGIN),
            max(0, int(rect['y']) - var.MARGIN),
            int(rect['x'] + rect['width'] + var.MARGIN),
            int(rect['y'] + rect['height'] + var.MARGIN)
        )
        image = Image.open(screenshot_path)
        cropped_image = image.crop(crop_box)
        cropped_image.save(screenshot_path)
        logger.debug(f"Screenshot saved: {screenshot_path}")

        try:
            photo = FSInputFile(screenshot_path)
            await status_message.edit_text("‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è—é...")
            await message.answer_photo(photo=photo, caption=f"<code>{group_name.capitalize()}</code>. <b>{week_num}</b> –Ω–µ–¥–µ–ª—è", parse_mode="html", reply_markup=kb.main_keyboard)
            await status_message.delete()
        except Exception as e:
            await status_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")

        return screenshot_path
    finally:
        await driver_pool.release(driver)

async def screenshot_timetable_tomorrow(message: Message, group_name: str):
    logger.debug(f"Started screenshotting tomorrow timetable for {group_name}")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É –∑–∞–≤—Ç—Ä–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è –ø–æ–∏—Å–∫–∞
    now = datetime.now()
    tomorrow_date = now + timedelta(days=1)
    tomorrow_str = tomorrow_date.strftime("%d.%m.%y")
    target_date = tomorrow_date.strftime("%d %B").lower()
    
    screenshot_path = f"./data/screenshots/tomorrow_{group_name.lower()}_{tomorrow_str}.png"

    if os.path.exists(screenshot_path):
        last_modified_time = datetime.fromtimestamp(os.path.getmtime(screenshot_path))
        if datetime.now() - last_modified_time < var.CACHE_DURATION:
            logger.debug(f"Using cached screenshot: {screenshot_path}")
            try:
                photo = FSInputFile(screenshot_path)
                await message.answer_photo(photo=photo, caption=f"üóìÔ∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ <i>({tomorrow_str})</i>", parse_mode="html")
            except Exception as e:
                await status_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
            return screenshot_path

    status_message = await message.answer("‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ...")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –≥—Ä—É–∑–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é
    next_week = tomorrow_date.weekday() == 0  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ = —Å–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è
    
    driver = await driver_pool.acquire()
    try:
        try:
            parent_container = await driver.select_timetable(group_name, next_week=next_week)
            
            if parent_container is None:
                await status_message.edit_text("üì≠ <b>–ó–∞–≤—Ç—Ä–∞ –Ω–µ—Ç –ø–∞—Ä.</b>", parse_mode="html")
                return None

            driver.execute_script("arguments[0].scrollIntoView({behavior: 'auto', block: 'center'});", parent_container)
            time.sleep(0.5)
            
            
            target_day = (datetime.today()+timedelta(days=1)).weekday()
            
            has_lessons = keep_only_day(driver, target_day)
            if not has_lessons:
                await status_message.edit_text("üì≠ <b>–ó–∞–≤—Ç—Ä–∞ –Ω–µ—Ç –ø–∞—Ä.</b>", parse_mode="html")
                return None
            
            clear_all_rows(driver)
            driver.save_screenshot(screenshot_path)
            
            rect = parent_container.rect
            crop_box = (
                max(0, int(rect['x']) - var.MARGIN),
                max(0, int(rect['y']) - var.MARGIN),
                int(rect['x'] + rect['width'] + var.MARGIN),
                int(rect['y'] + rect['height'] + var.MARGIN)
            )
            
            with Image.open(screenshot_path) as img:
                cropped = img.crop(crop_box)
                cropped.save(screenshot_path)

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            await message.answer_photo(
                photo=FSInputFile(screenshot_path),
                caption=f"üóìÔ∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ <i>({tomorrow_str})</i>",
                parse_mode="html"
            )
            await status_message.delete()

        except Exception as e:
            await status_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            logger.error(f"Error in tomorrow screenshot: {str(e)}")

        return screenshot_path
    finally:
        await driver_pool.release(driver)

async def screenshot_timetable_today(message: Message, group_name: str):
    logger.debug(f"Started screenshotting today timetable for {group_name}")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É –∑–∞–≤—Ç—Ä–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è –ø–æ–∏—Å–∫–∞
    today = datetime.now()
    today_str = today.strftime("%d.%m.%y")
    
    screenshot_path = f"./data/screenshots/today_{group_name.lower()}_{today_str}.png"
    # os.makedirs(os.path.dirname(screenshot_path), exist_ok=True)

    if os.path.exists(screenshot_path):
        last_modified_time = datetime.fromtimestamp(os.path.getmtime(screenshot_path))
        if datetime.now() - last_modified_time < var.CACHE_DURATION:
            logger.debug(f"Using cached screenshot: {screenshot_path}")
            try:
                photo = FSInputFile(screenshot_path)
                await message.answer_photo(photo=photo, caption=f"üóìÔ∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è <i>({today_str})</i>", parse_mode="html")
            except Exception as e:
                await status_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
            return screenshot_path

    status_message = await message.answer("‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ...")

    driver = await driver_pool.acquire()
    
    try:
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –≥—Ä—É–∑–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é
            parent_container = await driver.select_timetable(group_name, next_week=False)
            
            if parent_container is None:
                await status_message.edit_text("üì≠ <b>–°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –ø–∞—Ä.</b>", parse_mode="html")
                return None

            # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∏ —Å–∫—Ä–∏–Ω—à–æ—Ç
            driver.execute_script("arguments[0].scrollIntoView({behavior: 'auto', block: 'center'});", parent_container)
            time.sleep(0.5)
            
            target_day = datetime.today().weekday()
            
            clear_all_rows(driver)
            has_lessons = keep_only_day(driver, target_day)
            print(has_lessons)
            if not has_lessons:
                await status_message.edit_text("üì≠ <b>–°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –ø–∞—Ä.</b>", parse_mode="html")
                return None
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –æ–±—Ä–µ–∑–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
            driver.save_screenshot(screenshot_path)
            
            # –û–±—Ä–µ–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            rect = parent_container.rect
            crop_box = (
                max(0, int(rect['x']) - var.MARGIN),
                max(0, int(rect['y']) - var.MARGIN),
                int(rect['x'] + rect['width'] + var.MARGIN),
                int(rect['y'] + rect['height'] + var.MARGIN)
            )
            
            with Image.open(screenshot_path) as img:
                cropped = img.crop(crop_box)
                cropped.save(screenshot_path)

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            await message.answer_photo(
                photo=FSInputFile(screenshot_path),
                caption=f"üóìÔ∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è <i>({today_str})</i>",
                parse_mode="html"
            )
            await status_message.delete()

        except Exception as e:
            await status_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            logger.error(f"Error in today screenshot: {str(e)}")

        return screenshot_path
    finally:
        await driver_pool.release(driver)