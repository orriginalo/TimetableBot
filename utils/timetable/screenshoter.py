from datetime import datetime, timedelta
import time
from aiogram import Bot
from aiogram.types import FSInputFile, Message
from utils.selenium_driver import Driver
from utils.log import logger
from PIL import Image
import variables as var
import os
from datetime import datetime, timedelta
from aiogram.types import FSInputFile, Message
from utils.selenium_driver import Driver
from utils.log import logger
from PIL import Image
import variables as var
import bot.keyboards as kb

from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

margin = 15
CACHE_DURATION = timedelta(minutes=7)

def keep_only_day(driver, target_day):
    target_day = target_day.strip().lower()
    rows = WebDriverWait(driver, 10).until(
        EC.presence_of_all_elements_located((By.CLASS_NAME, "row"))
    )
    
    for row in rows:
        try:
            header = row.find_element(By.XPATH, ".//div[@class='table-header-col']")
            header_text = header.text
            
            if target_day in header_text.lower() or header_text.lower().startswith("–ø–∞—Ä–∞"):
                continue  # –û—Å—Ç–∞–≤–ª—è–µ–º —ç—Ç—É —Å—Ç—Ä–æ–∫—É
            else:
                # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –¥—Ä—É–≥–∏–º–∏ –¥–Ω—è–º–∏
                driver.execute_script("arguments[0].remove();", row)
        except:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –¥–Ω—è
            continue

async def screenshot_timetable(message: Message, driver: Driver, group_name: str, other_group: bool = False):
    logger.debug(f"Started screenshotting timetable for group {group_name} (—Ç–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è)...")
    week_num = var.calculate_current_study_number_week()
    monday_of_week = var.get_monday_of_week(week_num).strftime("%d.%m.%y")
    screenshot_path = f"./data/screenshots/full_{group_name.lower()}_{monday_of_week}.png"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –∏ –≤—Ä–µ–º–µ–Ω–∏ –µ–≥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
    if os.path.exists(screenshot_path):
        last_modified_time = datetime.fromtimestamp(os.path.getmtime(screenshot_path))
        if datetime.now() - last_modified_time < CACHE_DURATION:
            logger.debug(f"Using cached screenshot: {screenshot_path}")
            try:
                photo = FSInputFile(screenshot_path)
                await message.answer_photo(photo=photo, caption=f"<code>{group_name.capitalize()}</code>. <b>{week_num}</b> –Ω–µ–¥–µ–ª—è", parse_mode="html")
            except Exception as e:
                await status_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
            return screenshot_path

    status_message = await message.answer("‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ...")

    parent_container = driver.select_timetable(group_name, next_week=False)
    if parent_container is None:
        if other_group:
            await status_message.delete()
            await message.answer(f"üì≠ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é –Ω–µ—Ç</b>.", parse_mode="html", reply_markup=kb.main_keyboard) 
            logger.error(f"–¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è –¥–ª—è –≥—Ä—É–ø–ø—ã {group_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return None
        else:
            await status_message.edit_text(f"üì≠ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é –Ω–µ—Ç</b>.", parse_mode="html") 
            logger.error(f"–¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è –¥–ª—è –≥—Ä—É–ø–ø—ã {group_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return None

    driver.save_screenshot(screenshot_path)

    rect = parent_container.rect
    crop_box = (
        max(0, int(rect['x']) - margin),
        max(0, int(rect['y']) - margin),
        int(rect['x'] + rect['width'] + margin),
        int(rect['y'] + rect['height'] + margin)
    )
    image = Image.open(screenshot_path)
    cropped_image = image.crop(crop_box)
    cropped_image.save(screenshot_path)
    logger.debug(f"Screenshot saved: {screenshot_path}")

    try:
        photo = FSInputFile(screenshot_path)
        await status_message.edit_text("‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è—é...")
        await message.answer_photo(photo=photo, caption=f"<code>{group_name.capitalize()}</code>. <b>{week_num}</b> –Ω–µ–¥–µ–ª—è", parse_mode="html")
        await status_message.delete()
    except Exception as e:
        await status_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")

    return screenshot_path


async def screenshot_timetable_next_week(message: Message, driver: Driver, group_name: str):
    logger.debug(f"Started screenshotting timetable for group {group_name} (—Ç–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è)...")
    week_num = var.calculate_current_study_number_week() + 1
    monday_of_week = var.get_monday_of_week(week_num).strftime("%d.%m.%y")
    screenshot_path = f"./data/screenshots/full_{group_name.lower()}_{monday_of_week}.png"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –∏ –≤—Ä–µ–º–µ–Ω–∏ –µ–≥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
    if os.path.exists(screenshot_path):
        last_modified_time = datetime.fromtimestamp(os.path.getmtime(screenshot_path))
        if datetime.now() - last_modified_time < CACHE_DURATION:
            logger.debug(f"Using cached screenshot: {screenshot_path}")
            try:
                photo = FSInputFile(screenshot_path)
                await message.answer_photo(photo=photo, caption=f"<code>{group_name.capitalize()}</code>. <b>{week_num}</b> –Ω–µ–¥–µ–ª—è", parse_mode="html", reply_markup=kb.main_keyboard)
            except Exception as e:
                await status_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
            return screenshot_path

    status_message = await message.answer("‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ...")

    parent_container = driver.select_timetable(group_name, next_week=True)
    if parent_container is None:
        await status_message.delete()
        await message.answer(f"üì≠ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é –Ω–µ—Ç</b>.", parse_mode="html") 
        logger.error(f"–°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è –¥–ª—è –≥—Ä—É–ø–ø—ã {group_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return None

    driver.save_screenshot(screenshot_path)

    rect = parent_container.rect
    crop_box = (
        max(0, int(rect['x']) - margin),
        max(0, int(rect['y']) - margin),
        int(rect['x'] + rect['width'] + margin),
        int(rect['y'] + rect['height'] + margin)
    )
    image = Image.open(screenshot_path)
    cropped_image = image.crop(crop_box)
    cropped_image.save(screenshot_path)
    logger.debug(f"Screenshot saved: {screenshot_path}")

    try:
        photo = FSInputFile(screenshot_path)
        await status_message.edit_text("‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è—é...")
        await message.answer_photo(photo=photo, caption=f"<code>{group_name.capitalize()}</code>. <b>{week_num}</b> –Ω–µ–¥–µ–ª—è", parse_mode="html", reply_markup=kb.main_keyboard)
        await status_message.delete()
    except Exception as e:
        await status_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")

    return screenshot_path

async def screenshot_timetable_tomorrow(message: Message, driver: Driver, group_name: str):
    logger.debug(f"Started screenshotting tomorrow timetable for {group_name}")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É –∑–∞–≤—Ç—Ä–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è –ø–æ–∏—Å–∫–∞
    now = datetime.now()
    tomorrow_date = now + timedelta(days=1)
    tomorrow_str = tomorrow_date.strftime("%d.%m.%y")
    target_date = tomorrow_date.strftime("%d %B").lower()
    
    screenshot_path = f"./data/screenshots/tomorrow_{group_name.lower()}_{tomorrow_str}.png"
    # os.makedirs(os.path.dirname(screenshot_path), exist_ok=True)

    status_message = await message.answer("‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ...")

    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –≥—Ä—É–∑–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é
        next_week = tomorrow_date.weekday() == 0  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ = —Å–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è
        parent_container = driver.select_timetable(group_name, next_week=next_week)
        
        if parent_container is None:
            await status_message.edit_text("üì≠ <b>–ó–∞–≤—Ç—Ä–∞ –Ω–µ—Ç –ø–∞—Ä.</b>", parse_mode="html")
            return None

        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∫—Ä–æ–º–µ –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è
        driver.execute_script(f"""
            // –£–¥–∞–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–µ–¥–µ–ª—å
            document.querySelector('.week')?.remove();
            document.querySelector('.week-num')?.remove();
            
            // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Å –¥–Ω—è–º–∏
            const allRows = Array.from(document.querySelectorAll('.row'));
            
            // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫—É —Å –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–π –¥–∞—Ç–æ–π
            let targetRow = null;
            for(const row of allRows) {{
                const header = row.querySelector('.table-header-col');
                if(header && header.textContent.toLowerCase().includes("{target_date}")) {{
                    targetRow = row;
                    break;
                }}
            }}
            
            // –£–¥–∞–ª—è–µ–º –≤—Å–µ –¥—Ä—É–≥–∏–µ —Å—Ç—Ä–æ–∫–∏
            if(targetRow) {{
                const container = targetRow.closest('.container');
                while(container.firstChild) container.removeChild(container.firstChild);
                container.appendChild(targetRow);
            }}
            
            // –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ –∫–æ–ª–æ–Ω–∫–∏
            document.querySelectorAll('.table-col').forEach(col => {{
                if(col.textContent.trim() === '-') col.remove();
            }});
        """)

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        driver.execute_script("""
            document.querySelector('nav.navbar')?.remove();
            document.querySelector('.input-group')?.remove();
            document.querySelector('.layout-panel')?.remove();
        """)

        # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∏ —Å–∫—Ä–∏–Ω—à–æ—Ç
        driver.execute_script("arguments[0].scrollIntoView({behavior: 'auto', block: 'center'});", parent_container)
        time.sleep(0.5)
        
        
        tomorrow_weekday = (datetime.today()+timedelta(days=1)).weekday()
        target_day = var.weekdays[tomorrow_weekday]
        print(target_day)
        
        keep_only_day(driver, target_day)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –æ–±—Ä–µ–∑–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
        driver.save_screenshot(screenshot_path)
        
        # –û–±—Ä–µ–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        rect = parent_container.rect
        margin = 10
        crop_box = (
            max(0, int(rect['x']) - margin),
            max(0, int(rect['y']) - margin),
            int(rect['x'] + rect['width'] + margin),
            int(rect['y'] + rect['height'] + margin)
        )
        
        with Image.open(screenshot_path) as img:
            cropped = img.crop(crop_box)
            cropped.save(screenshot_path)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        await message.answer_photo(
            photo=FSInputFile(screenshot_path),
            caption=f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ {group_name} –Ω–∞ {tomorrow_str}"
        )
        await status_message.delete()

    except Exception as e:
        await status_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        logger.error(f"Error in tomorrow screenshot: {str(e)}")

    return screenshot_path